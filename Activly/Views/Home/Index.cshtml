@{
    ViewData["Title"] = "Home Page";
}



<head>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://maps.googleapis.com/maps/api/js?key=APIKLUCZ&callback=initMap" async defer></script>
</head>

<body>

    <div id="promptModal" class="modal">
        <div class="modal-content">
            <h4>Podaj szczegóły aktywności</h4>


            <label for="activityName">Nazwa Aktywności:</label>
            <input type="text" id="activityName" placeholder="Nazwa aktywności" value="Pinezka">


            <label for="activityTime">Czas (HH:MM):</label>
            <input type="time" id="activityTime" value="12:00">


            <button id="confirmBtn">Zatwierdź</button>
            <button id="closeModalBtn">Anuluj</button>
        </div>
    </div>

    <div id="alertModal" class="modal">
        <div class="modal-content">
            <h4>Wybierz godzinę i aktywność</h4>
        

            <label for="activity">Nazwa Aktywności:</label>
            <input type="text" id="activity" placeholder="Nazwa aktywności">


            <label for="time">Godzina (HH:MM):</label>
            <input type="time" id="time" required>

            <label for="timeRange">Zakres Czasu (godziny):</label>
            <input type="number" id="timeRange" placeholder="Zakres czasu w godzinach" min="1">


            <button id="submitBtn">Zatwierdź</button>
            <button id="cancelBtn">Anuluj</button>
        </div>
    </div>

    <div id="mergeModal">
        <p>Czy dodać Cię do wydarzenia zamiast tego?</p>
        <button id="yesButton">Tak</button>
        <button id="noButton">Nie</button>
        <button id="closeModal">Zamknij</button>
    </div>

    <div class="buttonContainer">
        <button onclick="openSearchModal()" class="openSearchButton">Open Search</button>
        <button id="drawCirclesButton">Zasięg pinów</button>
        <button id="refreshButton">Odswiez</button>
    </div>

    <div id="searchModal" style="display:none;">
        <button class="close">&times;</button>
        <input type="text" id="activitySearchText" placeholder="Search activity...">
        <button id="searchButton">Szukaj</button>
    </div>
    
    <div id="markerModal" class="modal">

    <div class="modal-content">
        <span class="close">&times;</span> 
        <p id="markerTitle">Nazwa pinezki</p>
        
        <p><span id="markerAuthor"></span></p>
        <p><span id="markerTime"></span></p>
        <p><span id="markerActivity"></span></p>
        
        <p>Zainteresowania:</p>
        <ul id="markerInterestList"></ul>
            <button onclick="addInterestedUser()">Add Me as Interested</button>
            <button onclick="removeInterestedUser()">Remove Me as Interested</button>
    </div>

</div>



    <script>

        ///Alert modal
        let alertTime;
        let alertTimeRange;
        let activity;


        const alertModal = document.getElementById("alertModal") 
        const submitBtn = document.getElementById("submitBtn");
        const cancelBtn = document.getElementById("cancelBtn");
        


        cancelBtn.addEventListener("click", () => {
            alertModal.style.display = "none";  
        });
        submitBtn.addEventListener("click", () => {
            activity = document.getElementById("activity").value;
            alertTime = document.getElementById("time").value;
            alertTimeRange = document.getElementById("timeRange").value;

            if (!activity || !time || !timeRange) {
                alert("Proszę uzupełnić wszystkie pola!");
                return;  
            }

            console.log("Aktywność:", activity);
            console.log("Godzina:", alertTime);
            console.log("Zakres Czasu:", alertTimeRange);

            alertModal.style.display = "none";
        });

        //Zmienne 
        let currentMarker = null;

        let markers = [];
        let map;
        let mergeBool = false;
        let test;


        
        //SEARCH PIN

        document.getElementById('searchButton').addEventListener('click', searchActivityAndRemove);

        document.querySelector('.close').addEventListener('click', closeSearchModal);

        function closeSearchModal() {
            const modal = document.getElementById('searchModal');
            modal.style.display = 'none';
        }

        function openSearchModal() {
            const modal = document.getElementById('searchModal');
            modal.style.display = 'block';
        }

        function searchActivityAndRemove() {
            const activitySearchText = document.getElementById('activitySearchText').value.trim().toLowerCase();
            if (!activitySearchText) {
                alert("Please enter an activity name.");
                return;
            }

            console.log("Searching for activity:", activitySearchText);


            markers.forEach(pin => {
                const activity = pin.activity ? pin.activity.toLowerCase() : "";
                const time = pin.time ? pin.time.toLowerCase() : "";

                console.log(`Checking pin: ${pin.title} with activity: ${activity}`);


                if (!activity.includes(activitySearchText) && !time.includes(activitySearchText)) {
                    console.log(`Removing pin: ${pin.title}`);


                    if (pin) {
                        pin.setMap(null);
                    } else {
                        console.error(`No marker associated with pin: ${pin.title}`);
                    }
                }
            });

            closeSearchModal();
        }

        // ADD / REMOVE INTEREST

        // Miejsce na add/remove interest

        /// Login / Register

        window.onload = function () {
            fetchUserName();
        };

        document.getElementById('loginForm').addEventListener('submit', handleLogin);
        
        function handleRegister(event) {
            event.preventDefault();

            const formData = new FormData(event.target);
            const data = {
                login: formData.get('login'),
                password: formData.get('password'),
                confirmPassword: formData.get('confirmPassword')
            };

            fetch(event.target.action, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Success:', data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
                
        //Mapa

        //Ładowanie mapy
        function initMap() {

            var location = { lat: 53.428792, lng: 14.562893 };


            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: location
            });


            var marker = new google.maps.Marker({
                position: location,
                map: map
            });


            map.addListener('rightclick', async (event) => {

                
                currentLatLng = event.latLng;
                if (!userName) {
                    await fetchUserName();
                }

                showPromptModal((isConfirmed, userActivity, userTime) => {
                    if (isConfirmed) {
                        activity = userActivity;
                        timeStr = userTime;
                        addMarker(currentLatLng, userName, timeStr, activity, null, true);
                    }
                });
                
            });

            fetchPins();

        }

        let currentLatLng = null;
        let timeStr = null;
       
        function fetchPins() {
            fetch('https://IPSERWER/api/pin')
                .then(response => response.json())
                .then(pins => {
                    console.log("Fetched pins:", pins);


                    if (Array.isArray(pins)) {
                        pins.forEach(pin => {
                            console.log(`Pin data: Latitude = ${pin.latitude}, Longitude = ${pin.longitude}`);


                            if (pin.latitude && pin.longitude) {

                                const latitude = parseFloat(pin.latitude.replace(',', '.'));
                                const longitude = parseFloat(pin.longitude.replace(',', '.'));


                                if (!isNaN(latitude) && !isNaN(longitude)) {
                                    const location = new google.maps.LatLng(latitude, longitude);




                                    addMarker(
                                        location,
                                        pin.author || "Pinezka",
                                        pin.time || "Brak godziny",
                                        pin.activity || "Brak aktywności",
                                        pin.interestedPeople || [],
                                        false
                                    );



                                } else {
                                    console.error("Invalid latitude or longitude:", pin.latitude, pin.longitude);
                                }
                            } else {
                                console.error("Latitude or Longitude missing in pin data:", pin);
                            }
                        });
                    } else {
                        console.error("API response is not an array of pins.");
                    }
                })
                .catch(error => {
                    console.error('Error fetching pins:', error);
                });
        }

        function addMarker(location, author, time, activity, interests, fromUser) {
            test = new google.maps.LatLng(location.lat, location.lng);
            if (fromUser) {

                
                const radius = 1; 
                const duplicateActivity = markers.some(marker => {
                    const distance = getDistanceInKm(location.lat(), location.lng(), marker.position.lat(), marker.position.lng());
                    currentMarker = marker;
                    return distance <= radius && marker.activity === activity;
                });

                if (duplicateActivity) {

                    alert(`W promieniu 1 km istnieje już pinezka z aktywnością: ${activity}. Czy zamiast tego, dodać cię do wydarzenia?`);

                    showModal((mergeBool) => {
                        console.log(mergeBool);

                        if (mergeBool) {
                            addInterestedUser();
                            return; 
                        }


                        const marker = new google.maps.Marker({
                            position: location,
                            map: map,
                            title: author
                        });

                        marker.author = author;
                        marker.time = time;
                        marker.activity = activity;
                        marker.interests = interests;

                        console.log("Marker data:", marker);


                        marker.addListener('click', () => {
                            openModal(marker);
                        });

                        
                        console.log("LatLng utworzony:", test);

                        const authorTrim = String(author).trim(); 
                        const timeTrim = String(time).trim(); 
                        const activityTrim = String(activity).trim();

                        savePin(currentLatLng, authorTrim, timeTrim, activityTrim);
                        markers.push(marker);

                    });

                    return; 
                }
                else {
                    const authorTrim = String(author).trim(); 
                    const timeTrim = String(time).trim(); 
                    const activityTrim = String(activity).trim();

                    
                    console.log(test);
                    savePin(currentLatLng, authorTrim, timeTrim, activityTrim);
                }
            }
            
            
            const marker = new google.maps.Marker({
                position: location,
                map: map,
                title: author
            });

            marker.author = author;
            marker.time = time;
            marker.activity = activity;
            marker.interests = interests;

            console.log("Marker data:", marker);


            marker.addListener('click', () => {
                openModal(marker);
            });


            markers.push(marker);
           
            /* DO debugowania */



        }

        //Merge
        function showModal(callback) {
            document.getElementById('mergeModal').style.display = 'block';

            const yesButton = document.getElementById('yesButton');
            const noButton = document.getElementById('noButton');

            yesButton.onclick = () => {
                document.getElementById('mergeModal').style.display = 'none';
                callback(true); 
            };

            noButton.onclick = () => {
                document.getElementById('mergeModal').style.display = 'none';
                callback(false); 
            };
        }

        function askIfAddToEvent(answer) {
            if (answer === 'tak') {
                alert("Zostałeś dodany do wydarzenia!");
                return true;
            } else {
                alert("Nie zostałeś dodany do wydarzenia.");
                return false;
            }
        }

        document.getElementById('closeModal').addEventListener('click', function () {
            document.getElementById('modal').style.display = 'none'; 
        });

        //Pin okno

        //Miejsce na okno pinu

document.querySelector('.close').addEventListener('click', closeMarkerModal);

function openModal(marker) {
    const modal = document.getElementById('markerModal');


    document.getElementById('markerTitle').textContent = marker.title;
    document.getElementById('markerAuthor').textContent = `Autor: ${marker.author || "Brak autora"}`;
    document.getElementById('markerTime').textContent = `Godzina: ${marker.time || "Brak godziny"}`;
    document.getElementById('markerActivity').textContent = `Aktywność: ${marker.activity || "Brak aktywności"}`;


    const interestList = document.getElementById('markerInterestList');
    interestList.innerHTML = '';
    if (marker.interests && marker.interests.length > 0) {
        marker.interests.forEach(interest => {
            const listItem = document.createElement('li');
            listItem.textContent = interest;


            const avatar = document.createElement('img');
            const avatarUrl = `https://IPSERWER/uploads/${interest}/avatar.png`;


            const img = new Image();
            img.onload = () => {
                avatar.src = avatarUrl;
                avatar.alt = `${interest}'s Avatar`;
                avatar.style.width = '30px';
                avatar.style.height = '30px';
                avatar.style.marginLeft = '10px';
                listItem.appendChild(avatar);
            };
            img.onerror = () => {

                avatar.style.display = 'none';
            };
            img.src = avatarUrl;


            interestList.appendChild(listItem);
        });

    } else {
        const listItem = document.createElement('li');
        listItem.textContent = "Brak zainteresowanych";
        interestList.appendChild(listItem);
    }

    currentMarker = marker;


    modal.style.display = 'block';
}

function closeMarkerModal() {
    const markerModal = document.getElementById('markerModal');
    markerModal.style.display = 'none';
}

        //Pomocniczne funkcje

        function getDistanceInKm(lat1, lng1, lat2, lng2) {
            const R = 6371; 
            const dLat = degreesToRadians(lat2 - lat1);
            const dLng = degreesToRadians(lng2 - lng1);
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *
                Math.sin(dLng / 2) * Math.sin(dLng / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; 
        }

        // Funkcja pomocnicza do konwersji stopni na radiany
        function degreesToRadians(degrees) {
            return degrees * (Math.PI / 180);
        }
        const radius = 1; // 1 km

        const nearbyMarkers = markers.filter(marker => {
            const distance = getDistanceInKm(centerPoint.lat, centerPoint.lng, marker.lat, marker.lng);
            return distance <= radius;
        });

        document.getElementById('drawCirclesButton').addEventListener('click', () => {

            if (window.markerCircles) {
                window.markerCircles.forEach(circle => circle.setMap(null));
            }
            window.markerCircles = [];


            markers.forEach(marker => {

                const circle = new google.maps.Circle({
                    strokeColor: "#FF0000",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#FF0000",
                    fillOpacity: 0.35,
                    map: map, 
                    center: marker.position, 
                    radius: 1000, // Promień w metrach (1 km)
                    clickable: false, 
                });


                window.markerCircles.push(circle);
            });

            console.log("Narysowano okręgi wokół wszystkich pinów.");
        });

        window.onload = function () {
            initMap();
        }

        window.addEventListener('click', function (event) {
            const markerModal = document.getElementById('markerModal');
            const loginModal = document.getElementById('loginModal');


            if (event.target === markerModal) {
                closeMarkerModal();
            }


            if (event.target === loginModal) {
                closeLoginModal();
            }
        });

        document.addEventListener('DOMContentLoaded', fetchUserName);

        document.getElementById('refreshButton').addEventListener('click', () => {
            location.reload();  
        });

    </script>

           

    </div>


    <div id="map"></div> 
 

</body>
