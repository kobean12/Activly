@{
    ViewData["Title"] = "Home Page";
}



<head>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://maps.googleapis.com/maps/api/js?key=APIKEY&libraries=visualization&callback=initMap" async defer></script>
</head>

<body>

    <div id="promptModal" class="modal">
        <div class="modal-content">
            <h4>Podaj szczegóły aktywności</h4>

            <label for="activityName">Wybierz Aktywność:</label>
            <select id="activityName">
                <option value="Koszykowka">Koszykowka</option>
                <option value="Pilka_nozna">Piłka nożna</option>
                <option value="Bieganie">Bieganie</option>
                <option value="Inne">Inne</option>
            </select>

            <label for="activityDate">Data (DD:MM:YYYY):</label>
            <input type="date" id="activityDate" value="2024-12-01" />

            <label for="activityTime">Czas (HH:MM):</label>
            <input type="time" id="activityTime" value="12:00">

            <button id="confirmBtn">Zatwierdź</button>
            <button id="closeModalBtn">Anuluj</button>
        </div>
    </div>
    
    <div id="alertModal" class="modal">
        <div class="modal-content">
            <h4>Wybierz godzinę i aktywność</h4>
        
            <label for="activity">Nazwa Aktywności:</label>
            <input type="text" id="activity" placeholder="Nazwa aktywności">

            <label for="time">Godzina (HH:MM):</label>
            <input type="time" id="time" required>

            <label for="timeRange">Zakres Czasu (godziny):</label>
            <input type="number" id="timeRange" placeholder="Zakres czasu w godzinach" min="1">

            <button id="submitBtn">Zatwierdź</button>
            <button id="cancelBtn">Anuluj</button>
        </div>
    </div>

    <div id="mergeModal">
        <p>Czy dodać Cię do wydarzenia zamiast tego?</p>
        <button id="yesButton">Tak</button>
        <button id="noButton">Nie</button>
        <button id="closeModal">Zamknij</button>
    </div>

    <div class="buttonContainer">
        <button onclick="openSearchModal()" class="openSearchButton">Open Search</button>
        <button id="drawCirclesButton">Zasięg pinów</button>
        <button id="refreshButton">Odswiez</button>
        <button id="getPointsButton">Obiekty sportowe</button> 
        <button onclick="openModal2()">Trasy Biegowe</button>

        <button id="markingModeButton">Tryb oznaczania</button>
        <button id="savePointsButton">Gotowe</button>
        <button id="toggleHeatmap">Pokaż Heatmapę</button>
    </div>

    <div id="searchModal" style="display:none;">
        <button class="close">&times;</button>
        <input type="text" id="activitySearchText" placeholder="Search activity...">
        <button id="searchButton">Szukaj</button>
        <div id="activityButtons">
            <button class="activityButton" data-activity="Koszykowka">Koszykowka</button>
            <button class="activityButton" data-activity="Pilka_nozna">Pilka nozna</button>
            <button class="activityButton" data-activity="Bieganie">Bieganie</button>
            <button class="activityButton" data-activity="Inne">Inne</button>
            
        </div>
    </div>

    <div id="surveyModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">Ankieta Przygotowania do Biegania</div>
            <form id="surveyForm">
                <div class="slider-container">
                    <label for="experienceLevel">Poziom doświadczenia</label>
                    <input type="range" id="experienceLevel" min="0" max="10" value="5">
                    <span id="experienceValue">5</span>/10
                </div>
                <div class="slider-container">
                    <label for="willingnessLevel">Poziom chęci</label>
                    <input type="range" id="willingnessLevel" min="0" max="10" value="5">
                    <span id="willingnessValue">5</span>/10
                </div>
                <div class="slider-container">
                    <label for="sportswearLevel">Ubiór sportowy</label>
                    <input type="range" id="sportswearLevel" min="0" max="10" value="5">
                    <span id="sportswearValue">5</span>/10
                </div>
                <div class="modal-footer">
                    <button type="button" class="close-btn" onclick="closeModal2()">Zamknij</button>
                    <button type="button" class="submit-btn" onclick="processSurvey()">Wyślij</button>
                </div>
            </form>
        </div>
    </div>
    
    <div id="markerModal" class="modal">

    <div class="modal-content">
        <span class="close">&times;</span> 
        <p id="markerTitle">Nazwa pinezki</p>
        
        <p><span id="markerAuthor"></span></p>
        <p><span id="markerTime"></span></p>
        <p><span id="markerDate"></span></p>
        <p><span id="markerActivity"></span></p>
        
        <p>Zainteresowania:</p>
        <ul id="markerInterestList"></ul>
            <button onclick="addInterestedUser()">Add Me as Interested</button>
            <button onclick="removeInterestedUser()">Remove Me as Interested</button>
        <p>Rezerwowi:</p>
        <ul id="markerLobbyList"></ul>
    </div>

</div>



    <script>
        ///trasy
        function drawRoute(routePoints) {

            
            map.panTo(routePoints[0]); 

            const startMarker = new google.maps.Marker({
                position: routePoints[0],
                map: map,
                icon: {
                    path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
                    scale: 5,
                    fillColor: "green", 
                    fillOpacity: 1,
                    strokeWeight: 1
                }
            });

            
            const endMarker = new google.maps.Marker({
                position: routePoints[routePoints.length - 1],
                map: map,
                icon: {
                    path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
                    scale: 5,
                    fillColor: "red", 
                    fillOpacity: 1,
                    strokeWeight: 1
                }
            });

            

            const routePath = new google.maps.Polyline({
                path: routePoints,
                geodesic: true,
                strokeColor: "#0000FF",
                strokeOpacity: 1.0,
                strokeWeight: 4
            });

            routePath.setMap(map);
        }

        const routes = {
            Trasa1: [
                { lat: 53.42814510965657, lng: 14.563782378002266 }, 
                { lat: 53.429477939001295, lng: 14.564597769542793 }, 
                { lat: 53.42990453661462, lng: 14.56337440405484 },
                { lat: 53.42830962721764, lng: 14.562451724153718 }
            ],
            Trasa2: [
                { lat: 53.42853443379454, lng: 14.552271711332802 },
                { lat: 53.43167943165026, lng: 14.554438936216835 },
                { lat: 53.43459301800072, lng: 14.55367955439581 },
                { lat: 53.4348103317564, lng: 14.555793135099545 },
                { lat: 53.435027644400805, lng: 14.559805719785825 },
                { lat: 53.432943953880404, lng: 14.558614818983212 },
                { lat: 53.43161680364806, lng: 14.557874529295102 },
                { lat: 53.43156335820688, lng: 14.557294634643885 },
                { lat: 53.43123097014934, lng: 14.55714443093905 },
                { lat: 53.43099446167941, lng: 14.557573584381434 },
                { lat: 53.42851755948546, lng: 14.556301143630467 },
                { lat: 53.428849968762414, lng: 14.553758409484349 }
            ],
            Trasa3: [
                { lat: 53.42853443379454, lng: 14.552271711332802 },
                { lat: 53.43167943165026, lng: 14.554438936216835 },
                { lat: 53.43459301800072, lng: 14.55367955439581 }
            ]
        };
        ///
        function openModal2() {
            document.getElementById('surveyModal').style.display = 'flex';
        }

        function closeModal2() {
            document.getElementById('surveyModal').style.display = 'none';
        }

        const experienceInput = document.getElementById('experienceLevel');
        const willingnessInput = document.getElementById('willingnessLevel');
        const sportswearInput = document.getElementById('sportswearLevel');

        experienceInput.addEventListener('input', () => {
            document.getElementById('experienceValue').textContent = experienceInput.value;
        });

        willingnessInput.addEventListener('input', () => {
            document.getElementById('willingnessValue').textContent = willingnessInput.value;
        });

        sportswearInput.addEventListener('input', () => {
            document.getElementById('sportswearValue').textContent = sportswearInput.value;
        });

        function processSurvey() {
            
            const experience = parseInt(experienceInput.value);
            const willingness = parseInt(willingnessInput.value);
            const sportswear = parseInt(sportswearInput.value);

            const totalScore = experience + willingness + sportswear;

            let message = '';
            switch (true) {
                case (totalScore <= 10):
                    message = 'Jesteś początkujący, zacznij od małych kroków!';
                    drawRoute(routes['Trasa1']);
                    break;
                case (totalScore <= 20):
                    message = 'Jesteś na dobrej drodze! Przygotuj się do regularnego biegania.';
                    drawRoute(routes['Trasa2']);
                    break;
                case (totalScore > 20):
                    message = 'Jesteś świetnie przygotowany! Czas na wyzwania.';
                    drawRoute(routes['Trasa3']);
                    break;
                default:
                    message = 'Wprowadź poprawne wartości.';
            }

            alert(message);
            closeModal2();
        }


        ////
        let heatmap = null;


        document.querySelectorAll('.activityButton').forEach(button => {
            button.addEventListener('click', function () {
                const activityName = this.getAttribute('data-activity');
                document.getElementById('activitySearchText').value = activityName;
            });
        });


        ///Alert modal
        let alertTime;
        let alertTimeRange;
        let activity;


        const alertModal = document.getElementById("alertModal");
        //const openModalBtn = document.getElementById("openModalBtn");
        const submitBtn = document.getElementById("submitBtn");
        const cancelBtn = document.getElementById("cancelBtn");
        

        cancelBtn.addEventListener("click", () => {
            alertModal.style.display = "none";  
        });
        submitBtn.addEventListener("click", () => {
            activity = document.getElementById("activity").value;
            alertTime = document.getElementById("time").value;
            alertTimeRange = document.getElementById("timeRange").value;

            if (!activity || !time || !timeRange) {
                alert("Proszę uzupełnić wszystkie pola!");
                return;  
            }

            console.log("Aktywność:", activity);
            console.log("Godzina:", alertTime);
            console.log("Zakres Czasu:", alertTimeRange);

            alertModal.style.display = "none";
        });

        //Zmienne 
        let currentMarker = null;

        let markers = [];
        let map;
        let mergeBool = false;
        let test;


        
        //SEARCH PIN
        document.getElementById('searchButton').addEventListener('click', searchActivityAndRemove);

        document.querySelector('.close').addEventListener('click', closeSearchModal);

        function closeSearchModal() {
            const modal = document.getElementById('searchModal');
            modal.style.display = 'none';
        }

        function openSearchModal() {
            const modal = document.getElementById('searchModal');
            modal.style.display = 'block';
        }

        function searchActivityAndRemove() {
            const activitySearchText = document.getElementById('activitySearchText').value.trim().toLowerCase();
            if (!activitySearchText) {
                alert("Please enter an activity name.");
                return;
            }

            console.log("Searching for activity:", activitySearchText);


            markers.forEach(pin => {
                const activity = pin.activity ? pin.activity.toLowerCase() : "";
                const time = pin.time ? pin.time.toLowerCase() : "";

                console.log(`Checking pin: ${pin.title} with activity: ${activity}`);


                if (!activity.includes(activitySearchText) && !time.includes(activitySearchText)) {
                    console.log(`Removing pin: ${pin.title}`);


                    if (pin) {
                        pin.setMap(null);
                    } else {
                        console.error(`No marker associated with pin: ${pin.title}`);
                    }
                }
            });

            closeSearchModal();
        }

        // ADD / REMOVE INTEREST

        function addInterestedUser() {
            const latitude = currentMarker.position.lat();
            const longitude = currentMarker.position.lng();
            const author = currentMarker.author;
            const user = userName;


            fetch(`https://IPSERVER/api/pin/addInterest?latitude=${latitude}&longitude=${longitude}&author=${author}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(user)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to add user to interested list. Please try again.");
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("User added to interested list successfully:", data);
                    alert("You have been added as an interested person!");
                })
                .catch(error => {
                    console.error("Error adding user to interested list:", error);
                    alert("Failed to add interest. Please try again later.");
                });
            location.reload();
        }

        function removeInterestedUser() {
            const latitude = currentMarker.position.lat();
            const longitude = currentMarker.position.lng();
            const author = currentMarker.author;
            const user = userName;


            fetch(`https://IPSERVER/api/pin/removeInterest?latitude=${latitude}&longitude=${longitude}&author=${author}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(user)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to remove user from interested list. Please try again.");
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("User removed from interested list successfully:", data);
                    alert("You have been removed from the interested list!");
                })
                .catch(error => {
                    console.error("Error removing user from interested list:", error);
                    alert("Failed to remove user. Please try again later.");
                });
            location.reload();
        }
        
        
        /// Login / Register

        window.onload = function () {
            fetchUserName();
        };

        document.getElementById('loginForm').addEventListener('submit', handleLogin);
        
        function handleRegister(event) {
            event.preventDefault();

            const formData = new FormData(event.target);
            const data = {
                login: formData.get('login'),
                password: formData.get('password'),
                confirmPassword: formData.get('confirmPassword')
            };

            fetch(event.target.action, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Success:', data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
                

        //Mapa
        
        //Ładowanie mapy


        let markingMode = false;
        let points = [];

        function drawCircle(location) {
            const circle = new google.maps.Circle({
                center: location,
                radius: 5, // Promień w metrach, mała kropka
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.8,
                map: map
            });
            points.push({ lat: location.lat(), lng: location.lng() });
        }
        document.getElementById('markingModeButton').addEventListener('click', function () {
            markingMode = !markingMode;
            this.textContent = markingMode ? 'Wyłącz tryb oznaczania' : 'Tryb oznaczania';
        });

        document.getElementById('savePointsButton').addEventListener('click', function () {
            // Wysłanie danych na serwer
            fetch('/api/Map/SavePoints', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ points: points.map(p => `${p.lat},${p.lng}`).join(';') })
            })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    points = []; 

                    location.reload(); 
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });

        function drawPolygon(points) {
            const polygon = new google.maps.Polygon({
                paths: points,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
            });

            

            polygon.setMap(map);
        }

        /// Debugowanie
        function drawPolygonNumber(points,number)
        {
            const polygon = new google.maps.Polygon({
                paths: points,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
            });

            polygon.setMap(map);

            const label = new google.maps.Marker({
                position: points[1],
                map: map,
                label: number.toString(),
                icon: null
            });
        }

        document.getElementById('getPointsButton').addEventListener('click', function () {
            console.log("Button 'Obiekty sportowe' clicked!");

            fetch('/api/Map/GetPoints') 
                .then(response => response.json())
                .then(data => {
                    
                    if (data && Array.isArray(data)) {
                        console.log("Points loaded:", data); 

                        const polygons = data.map(line => {

                            const points = line.split(';').map(point => {
                                const [latStr, lngStr] = point.split(','); 
                                const lat = parseFloat(latStr.trim()); 
                                const lng = parseFloat(lngStr.trim()); 

                                if (isNaN(lat) || isNaN(lng)) {
                                    console.error(`Błąd w punkcie: "${point}" - lat: ${lat}, lng: ${lng}`);
                                    return null; 
                                }

                                return { lat, lng };
                            }).filter(point => point !== null);

                            return points;
                        });

                        console.log("Processed Polygons:", polygons);

                        polygons.forEach((points, index) => {
                        drawPolygonNumber(points, index + 1); 
                        
                        });


                    } else {
                        alert("Nieprawidłowe dane z serwera.");
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                });
        });


        function initMap() {

            var location = { lat: 53.428792, lng: 14.562893 };


            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12,
                center: location
            });


            var marker = new google.maps.Marker({
                position: location,
                map: map
            });

            map.addListener('click', function (e) {
                if (markingMode) {
                    drawCircle(e.latLng);
                }
            });

            map.addListener('rightclick', async (event) => {

                
                currentLatLng = event.latLng;
                if (!userName) {
                    await fetchUserName();
                }

                showPromptModal((isConfirmed, userActivity, userTime, userDate) => {
                    if (isConfirmed) {

                        date = userDate;
                        activity = userActivity;
                        timeStr = userTime;
                        addMarker(currentLatLng, userName, timeStr, activity, null, true , userDate);
                    }
                });
                
            });

            map.addListener('mousedown', (event) => {

                if (event.domEvent.button === 1) { 

                    const latLng = event.latLng;

                    const circle = new google.maps.Circle({
                        strokeColor: "#0000FF",  
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: "#0000FF",   
                        fillOpacity: 0.35,
                        map: map,
                        center: latLng,          
                        radius: 1000,            // 1 km 
                    });
                    alertModal.style.display = "block"
                }
            });


            fetchPins();


            ///
            const heatmapData = [];

            loadHeatmapData();

            heatmap = new google.maps.visualization.HeatmapLayer({
                data: heatmapData,
                map: null, 
                gradient: [
                    'rgba(0, 255, 255, 0)', // Przezroczysty
                    'rgba(0, 255, 255, 1)', // Jasny niebieski
                    'rgba(0, 191, 255, 1)', // Niebieski
                    'rgba(0, 127, 255, 1)', // Ciemniejszy niebieski
                    'rgba(0, 0, 255, 1)',   // Głęboki niebieski
                    'rgba(0, 0, 127, 1)',   // Ciemniejszy niebieski
                    'rgba(127, 0, 255, 1)', // Fiolet
                    'rgba(255, 0, 255, 1)'  // Różowy (najmocniejsza intensywność)
                ],
                radius: 30,  
                opacity: 0.7
            });
            console.log('heatmapData:', heatmapData);
        }
        document.getElementById('toggleHeatmap').addEventListener('click', () => {
            toggleHeatmap();
        });

        function loadHeatmapData() {
            fetch('https://IPSERVER/api/pin/heatmap')
                .then(response => response.json())
                .then(data => {
                    const heatmapData = [];

                    data.forEach(item => {
                        const lat = parseFloat(item.latitude.replace(',', '.'));  
                        const lng = parseFloat(item.longitude.replace(',', '.')); 

                        if (!isNaN(lat) && !isNaN(lng)) {
                            const latLng = new google.maps.LatLng(lat, lng);
                            heatmapData.push(latLng);
                        } else {
                            console.warn('Nieprawidłowe dane współrzędnych:', item);
                        }
                    });

                    if (heatmapData.length > 0) {
                        const heatmap = new google.maps.visualization.HeatmapLayer({
                            data: heatmapData,
                            map: map, 
                        });
                    } else {
                        console.warn('Brak danych do wyświetlenia na heatmapie.');
                    }
                })
                .catch(error => {
                    console.error('Error fetching heatmap data:', error);
                });
        }

        function toggleHeatmap() {
            if (!heatmap) {
                console.error('Heatmap is not initialized.');
                return;
            }

            if (heatmap.getMap()) {
                heatmap.setMap(null);
                document.getElementById('toggleHeatmap').textContent = 'Pokaż Heatmapę';
            } else {
                heatmap.setMap(map);
                document.getElementById('toggleHeatmap').textContent = 'Ukryj Heatmapę';
            }
        }


        // Funkcja do aktywowania trybu dodawania punktów
        function activateAddingMode() {
            addingMode = true;
            points = []; 
            alert('Tryb dodawania punktów aktywowany. Kliknij 4 punkty na mapie.');
        }


        document.addEventListener('mousedown', (event) => {
            console.log('Numer przycisku myszy:', event.button);
        });
        
        let currentLatLng = null;
        let timeStr = null;
        

        function showPromptModal(callback) {
            const promptModal = document.getElementById("promptModal");
            const confirmBtn = document.getElementById("confirmBtn");
            const closeModalBtn = document.getElementById("closeModalBtn");

            promptModal.style.display = "block"; 


            confirmBtn.onclick = () => {
                const activityName = document.getElementById("activityName").value;
                const activityTime = document.getElementById("activityTime").value;
                const activityDate = document.getElementById("activityDate").value;

                if (!activityName || !activityTime) {
                    alert("Proszę wprowadzić nazwę aktywności i czas!");
                    return;
                }


                promptModal.style.display = "none";
                callback(true, activityName, activityTime, activityDate); 
            };


            closeModalBtn.onclick = () => {
                promptModal.style.display = "none"; 
                callback(false); 
            };
        }
        function savePin(latLng, author, time, activity, date) {
            console.log("savePin wywołana z danymi:", latLng);
            const data = {
                Latitude: latLng.lat(),
                Longitude: latLng.lng(),
                Author: author,
                Time: time,
                Activity: activity || 'Brak aktywności',
                InterestedPeople: [],
                Date: date
            };

            console.log("Dane do wysłania:", data);


            fetch('https://IPSERVER/api/pin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data) {
                        console.log('Pin saved successfully:', data);
                    } else {
                        console.error('Failed to save pin, no data returned');
                    }
                })
                .catch(error => {
                    console.error('Error saving pin:', error);
                });
        }

        


        function fetchPins() {
            fetch('https://IPSERVER/api/pin')
                .then(response => response.json())
                .then(pins => {
                    console.log("Fetched pins:", pins);


                    if (Array.isArray(pins)) {
                        pins.forEach(pin => {
                            console.log(`Pin data: Latitude = ${pin.latitude}, Longitude = ${pin.longitude}`);


                            if (pin.latitude && pin.longitude) {

                                const latitude = parseFloat(pin.latitude.replace(',', '.'));
                                const longitude = parseFloat(pin.longitude.replace(',', '.'));


                                if (!isNaN(latitude) && !isNaN(longitude)) {
                                    const location = new google.maps.LatLng(latitude, longitude);




                                    addMarker(
                                        location,
                                        pin.author || "Pinezka",
                                        pin.time || "Brak godziny",
                                        pin.activity || "Brak aktywności",
                                        pin.interestedPeople || [],
                                        false,
                                        pin.date
                                    );



                                } else {
                                    console.error("Invalid latitude or longitude:", pin.latitude, pin.longitude);
                                }
                            } else {
                                console.error("Latitude or Longitude missing in pin data:", pin);
                            }
                        });
                    } else {
                        console.error("API response is not an array of pins.");
                    }
                })
                .catch(error => {
                    console.error('Error fetching pins:', error);
                });
        }

        function addMarker(location, author, time, activity, interests, fromUser, userDate) {
            test = new google.maps.LatLng(location.lat, location.lng);

            let iconFileName = activity; 

         
            var customIcon = {
                url: `https://IPSERVER/uploads/icons/${iconFileName}.png`,
                scaledSize: new google.maps.Size(50, 75),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(25, 75)
            };

            if (fromUser) {

                
                const radius = 1; 
                const duplicateActivity = markers.some(marker => {
                    const distance = getDistanceInKm(location.lat(), location.lng(), marker.position.lat(), marker.position.lng());
                    currentMarker = marker;
                    return distance <= radius && marker.activity === activity;
                });

                if (duplicateActivity) {

                    alert(`W promieniu 1 km istnieje już pinezka z aktywnością: ${activity}. Czy zamiast tego, dodać cię do wydarzenia?`);

                    showModal((mergeBool) => {
                        console.log(mergeBool); 

                        if (mergeBool) {
                            addInterestedUser();
                            return; 
                        }

                        


                        const marker = new google.maps.Marker({
                            position: location,
                            map: map,
                            icon: customIcon,
                            title: author
                        });

                        marker.author = author;
                        marker.time = time;
                        marker.activity = activity;
                        marker.interests = interests;
                        marker.date = userDate;

                        console.log("Marker data:", marker);


                        marker.addListener('click', () => {
                            openModal(marker);
                        });

                       
                        console.log("LatLng utworzony:", test);

                        const authorTrim = String(author).trim(); 
                        const timeTrim = String(time).trim(); 
                        const activityTrim = String(activity).trim();

                        savePin(currentLatLng, authorTrim, timeTrim, activityTrim, userDate);
                        markers.push(marker);

                    });

                    return; 
                }
                else {
                    const authorTrim = String(author).trim(); 
                    const timeTrim = String(time).trim(); 
                    const activityTrim = String(activity).trim();

                    
                    console.log(test);
                    savePin(currentLatLng, authorTrim, timeTrim, activityTrim,userDate);
                }
            }
            
            
            const marker = new google.maps.Marker({
                position: location,
                map: map,
                icon: customIcon,
                title: author
            });

            marker.author = author;
            marker.time = time;
            marker.activity = activity;
            marker.interests = interests;
            marker.date = userDate;

            console.log("Marker data:", marker);


            marker.addListener('click', () => {
                openModal(marker);
            });


            markers.push(marker);
           
        }

        //Merge
        function showModal(callback) {
            document.getElementById('mergeModal').style.display = 'block';

            const yesButton = document.getElementById('yesButton');
            const noButton = document.getElementById('noButton');

            yesButton.onclick = () => {
                document.getElementById('mergeModal').style.display = 'none';
                callback(true); 
            };

            noButton.onclick = () => {
                document.getElementById('mergeModal').style.display = 'none';
                callback(false); 
            };
        }

        function askIfAddToEvent(answer) {
            if (answer === 'tak') {
                alert("Zostałeś dodany do wydarzenia!");
                return true;
            } else {
                alert("Nie zostałeś dodany do wydarzenia.");
                return false;
            }
        }

        document.getElementById('closeModal').addEventListener('click', function () {
            document.getElementById('modal').style.display = 'none'; 
        });

        //Pin okno

        document.querySelector('.close').addEventListener('click', closeMarkerModal);

        function openModal(marker) {
            const modal = document.getElementById('markerModal');


            document.getElementById('markerTitle').textContent = marker.title;
            document.getElementById('markerAuthor').textContent = `Autor: ${marker.author || "Brak autora"}`;
            document.getElementById('markerTime').textContent = `Godzina: ${marker.time || "Brak godziny"}`;
            document.getElementById('markerActivity').textContent = `Aktywność: ${marker.activity || "Brak aktywności"}`;
            document.getElementById('markerDate').textContent = `Data: ${marker.date || "Brak daty"}`;


            let maxInterestCount;
            //max = -1
            switch (marker.activity) { 

                case 'Koszykowka':
                    maxInterestCount = 10; // Maksymalna liczba zainteresowanych
                    break;

                case 'Pilka_nozna':
                    maxInterestCount = 22; // Maksymalna liczba zainteresowanych
                    break;

                case 'Bieganie':
                    maxInterestCount = 2; // Maksymalna liczba zainteresowanych
                    break;

                case 'Inne':
                    maxInterestCount = 3;
                    break;

            }


            const interestList = document.getElementById('markerInterestList');
            const lobbyList = document.getElementById('markerLobbyList'); 

            interestList.innerHTML = '';
            lobbyList.innerHTML = ''; 

            if (marker.interests && marker.interests.length > 0) {
                const interested = marker.interests.slice(0, maxInterestCount); 
                const reserves = marker.interests.slice(maxInterestCount); 

                interested.forEach(interest => {
                    if (interest.trim() === '') return;
                    const listItem = document.createElement('li');
                    listItem.textContent = interest;

                    const avatar = document.createElement('img');
                    const avatarUrl = `https://IPSERVER/uploads/${interest}/avatar.png`;

                    const img = new Image();
                    img.onload = () => {
                        avatar.src = avatarUrl;
                        avatar.alt = `${interest}'s Avatar`;
                        avatar.style.width = '30px';
                        avatar.style.height = '30px';
                        avatar.style.marginLeft = '10px';
                        listItem.appendChild(avatar);
                    };
                    img.onerror = () => {
                        avatar.style.display = 'none';
                    };
                    img.src = avatarUrl;

                    interestList.appendChild(listItem);
                });

                if (reserves.length > 0) {
                    //const reserveTitle = document.createElement('p');
                    //reserveTitle.textContent = ':';
                    //lobbyList.appendChild(reserveTitle);

                    reserves.forEach(interest => {
                        if (interest.trim() === '') return;
                        const listItem = document.createElement('li');
                        listItem.textContent = interest;

                        const avatar = document.createElement('img');
                        const avatarUrl = `https://IPSERVER/uploads/${interest}/avatar.png`;

                        const img = new Image();
                        img.onload = () => {
                            avatar.src = avatarUrl;
                            avatar.alt = `${interest}'s Avatar`;
                            avatar.style.width = '30px';
                            avatar.style.height = '30px';
                            avatar.style.marginLeft = '10px';
                            listItem.appendChild(avatar);
                        };
                        img.onerror = () => {
                            avatar.style.display = 'none';
                        };
                        img.src = avatarUrl;

                        lobbyList.appendChild(listItem);
                    });
                }

            } else {
                const listItem = document.createElement('li');
                listItem.textContent = "Brak zainteresowanych";
                interestList.appendChild(listItem);
            }

            currentMarker = marker;
            modal.style.display = 'block';
        }

        function closeMarkerModal() {
            const markerModal = document.getElementById('markerModal');
            markerModal.style.display = 'none';
        }


        //Pomocniczne funkcje

        function getDistanceInKm(lat1, lng1, lat2, lng2) {
            const R = 6371; // Promień Ziemi w kilometrach
            const dLat = degreesToRadians(lat2 - lat1);
            const dLng = degreesToRadians(lng2 - lng1);
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *
                Math.sin(dLng / 2) * Math.sin(dLng / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Odległość w kilometrach
        }

        // Funkcja pomocnicza do konwersji stopni na radiany
        function degreesToRadians(degrees) {
            return degrees * (Math.PI / 180);
        }
        const radius = 1; // 1 km


        const nearbyMarkers = markers.filter(marker => {
            const distance = getDistanceInKm(centerPoint.lat, centerPoint.lng, marker.lat, marker.lng);
            return distance <= radius;
        });

        document.getElementById('drawCirclesButton').addEventListener('click', () => {

            if (window.markerCircles) {
                window.markerCircles.forEach(circle => circle.setMap(null));
            }
            window.markerCircles = [];
            markers.forEach(marker => {
                const circle = new google.maps.Circle({
                    strokeColor: "#FF0000",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#FF0000",
                    fillOpacity: 0.35,
                    map: map, 
                    center: marker.position, 
                    radius: 1000, // Promień w metrach (1 km)
                    clickable: false, 
                });

                window.markerCircles.push(circle);
            });

            console.log("Narysowano okręgi wokół wszystkich pinów.");
        });

        window.onload = function () {
            initMap();
        }

        window.addEventListener('click', function (event) {
            const markerModal = document.getElementById('markerModal');
            const loginModal = document.getElementById('loginModal');


            if (event.target === markerModal) {
                closeMarkerModal();
            }


            if (event.target === loginModal) {
                closeLoginModal();
            }
        });

        document.addEventListener('DOMContentLoaded', fetchUserName);

        document.getElementById('refreshButton').addEventListener('click', () => {
            location.reload();
        });

    </script>

           

    </div>


    <div id="map"></div> 
 

</body>