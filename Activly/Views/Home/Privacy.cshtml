@model UserProfile
@{
    ViewData["Title"] = "Profile";
}

<h1>@ViewData["Title"]</h1>

<head>
    <script src="/js/site.js?v=1.0" defer></script>
</head>


<h2>User Profile</h2>

<h2>Edit Profile</h2>

<body>
    <div id="successMessage" style="display: none; color: green; margin-top: 10px;">Profile updated successfully!</div>
    <img id="profilePic" src="" alt="Profile Picture" style="max-width: 200px;" />

    <form id="profileForm" method="post" action="https://IPSERVER/api/profile/update/123" enctype="multipart/form-data">
        <div class="form-group">
            <label for="profilePicture">Profile Picture:</label>
            <input type="file" id="profilePicture" name="profilePicture" accept="image/*" class="form-control" onchange="previewImage(event)" />
            <img id="preview" src="#" alt="Profile Picture Preview" style="display:none; margin-top:10px; max-width: 150px;" />
        </div>

        <div class="form-group">
            <label for="gender">Gender:</label>
            <select name="gender" class="form-control" id="genderSelect">
                <option value="">Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <div class="form-group">
            <label for="age">Age:</label>
            <input type="number" name="age" class="form-control" id="ageInput" />
        </div>

        <button type="submit" class="btn btn-primary">Update Profile</button>
    </form>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let userName = "123";  

            async function fetchUserName() {
                try {
                    const response = await fetch('https://IPSERVER/api/session/get', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        userName = data.login;
                        document.getElementById("profileForm").action = `https://IPSERVER/api/profile/update/${userName}`;
                        loadProfile(userName); 
                    } else {
                        throw new Error("Failed to get username from session");
                    }
                } catch (error) {
                    console.error('Error fetching user name:', error);
                    loadProfile(userName); 
                }
            }

            
            function loadProfile(userName) {
                const avatarImg = document.getElementById("preview");
                const genderSelect = document.getElementById("genderSelect");
                const ageInput = document.getElementById("ageInput");

               
                const avatarFetch = fetch(`https://IPSERVER/api/Profile/get/${userName}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.avatarUrl) {
                            avatarImg.src = "https://IPSERVER" + data.avatarUrl;
                            avatarImg.style.display = "block"; 
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching avatar:", error);
                        avatarImg.style.display = "none"; 
                    });

                const profileDataFetch = fetch(`https://IPSERVER/api/Profile/get/${userName}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.profileData) {
                            const profileInfo = data.profileData.split('\n');
                            genderSelect.value = profileInfo[0].split(': ')[1] || ""; 
                            ageInput.value = profileInfo[1].split(': ')[1] || "";    
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching profile data:", error);
                    });

                Promise.allSettled([avatarFetch, profileDataFetch]).then(() => {
                    console.log("Profile data loaded.");
                });
            }

            document.getElementById("profilePicture").addEventListener("change", function (event) {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const avatarImg = document.getElementById("preview");
                        avatarImg.src = e.target.result;
                        avatarImg.style.display = "block";
                    };
                    reader.readAsDataURL(file); 
                }
            });

            document.getElementById("profileForm").addEventListener("submit", function (event) {
                event.preventDefault(); 

                const formData = new FormData(event.target);

                fetch(event.target.action, {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json())
                    .then(data => {

                        const successMessage = document.getElementById('successMessage');
                        successMessage.style.display = 'block'; 
                        setTimeout(() => {
                            successMessage.style.display = 'none'; 
                        }, 3000);
                    })
                    .catch(error => {
                        console.error("Error updating profile:", error);
                    });
            });

            fetchUserName();
        });
    </script>

</body>